---
categories:
- blog
- quarto
- blogging
- css
- excalidraw
date: '2023-02-18'
description: a blog journey
layout: post
author: Patrick D. Mobley
title: "Making a Quarto Website Fancy"
toc: true
image: quarto-2023-02-17.png
draft: true
---

![](quarto-2023-02-17.png){width="30em" fig-align="center"}

Whether you're new to [Quarto](https://quarto.org/) or recently [migrated from Fastpages to Quarto](../2023-02-17-migrating-from-fastpages-to-quarto/), you might be wondering how to customize your new blog. While Quarto provides more flexibility and control over formatting and content, it can take some time to get familiar with the system and make it your own. 

In this blog post, I will share some tips and tricks that I've discovered to help you customize your Quarto blog and improve its functionality and engagement.

:::{.callout-note collapse=true}
Most of this information is covered well within the Quarto [Guide](https://quarto.org/docs/guide/) or [Reference](https://quarto.org/docs/reference/) material. That said, in many cases I provide addition examples or screenshots. I also spent the time searching and organizing so that you can save time and get the information you need right here.
:::

### Choosing a template

You can change the site template and choose from many [options](https://bootswatch.com/). Plus, it's very easy. You can even create your own, however this will require some html and css knowledge. 

Within the `_quarto.yml`, you just specify a different theme:

```yml
format:
  html:
    theme: lux   
    # Here are some bootstrap theme options:
    #   default, cerulean, cosmo, cyborg, darkly, flatly, journal, 
    #   litera, lumen, lux, materia, minty, morph, pulse, quartz,
    #   sandstone, simplex, sketchy, slate, solar, spacelab, superhero,
    #   united, vapor, yeti, zephyr
    css: styles.css
```
Check out the [Quarto documentation](https://quarto.org/docs/output-formats/html-themes.html) for more information.

### Adding top navigation to your website

Adding different sections to your 

### Social links

You can add links to your social media sites within the Navbar and on any page (commonly the "About" page), or in the site footer. 

To add links on your Navbar you just edit the `_quarto.yml` `navbar:` property like this:

```yml
  - icon: twitter
    href: https://twitter.com/someones/
  - icon: linkedin
    href: https://www.linkedin.com/in/someones/
  - icon: github
    href: https://github.com/someones/
  - icon: envelope
    href: mailto:someones@gmail.com
```
You can get more information about this by going to the [Navbar Tools](https://quarto.org/docs/prerelease/1.3/website-nav.html#navbar-tools), [about](https://quarto.org/docs/websites/website-about.html), or [page-footer](https://quarto.org/docs/websites/website-navigation.html#page-footer) documentation. 

### Changing the layout

Because this is a blog, the content (post, article, tutorial, project, review, etc.) can be organized within different [listings](https://quarto.org/docs/websites/website-listings.html). 

### Embedding presentations

Let's say you've given some great talks and want share them on your website. I've seen many people use downloadable links or they write companion tutorials (like I did in [Missing Data Modeled](../../tutorials/2018-07-15-Missing-Data-Modeled)) to share content. But a link just doesn't do justice to the presentation and rewriting content takes a lot of work. Thankfully, there's a better way. You can use `.qmd` to create an html Revealjs presentation and embed this within a post. Using the Revealjs format, you can even include all of your talking points [in the notes](https://quarto.org/docs/presentations/revealjs/presenting.html#speaker-view).

1. Create a blank post
2. Add content into the same directory as the blank post 
  - If you've already created your presentation and have a stand-alone file, include this file in the directory
  - If not, create a presentation using Revealjs within a `.qmd` file  

:::{.callout-note}
I've only tested html presentations, so I'm not sure if other formats like `.pptx` will display. 
:::

3. Add resource to `yml` header. This ensures when building the site to include the presentation file.

```yml
title: "My presentation post page"
resources:
  - "NAME-OF-SLIDESHOW.html"
```
4. Add the following html to your blank post:

```html
<p align="center">
  <iframe width="400" height="400" marginheight="0" marginwidth="0" 
          src="./NAME-OF-SLIDESHOW.html"> 
  Fallback text here for unsupporting browsers, of which there are scant few.
</iframe></p>

```

Now, you've got a working presentation within your site. Users can make it go full screen, download, or export as a PDF using the menu bar. It should look something like this:  

![](embedded-slideshow.png){width="30em" fig-align="center"}

If you're looking for a presentation to inspire, check out the [Quarto Reporting](https://github.com/jthomasmock/quarto-reporting) presentation. The author, Tom Mock utilizes a variety of features to deliver a truly great presentation. 

### Embedding videos

Adding videos to your site is really easy as explained [here](https://quarto.org/docs/authoring/videos.html). Basically, you use the `{{{< video >}}}` shortcode. For example:

``` {.markdown shortcodes="false"}
{{< video https://www.youtube.com/embed/wo9vZccmqwc >}}
```

### Custom CSS buttons
And of course if you want to customize anything, knowledge of web development will help you out. I added a "See All" button by the pagination page-links. 

Unfortunately, the button was mis-aligned with the pagination page-links so adding the following to the `styles.css` solve the problem. 

```css
.btn-primary:hover {
    color: #000;
    background-color: #f0f1ff;
    border-color: #f0f1ff;
    padding: .375rem .75rem;
    font-size: .8rem !important;
    margin-top: -9px;
  }
  
.btn-primary {
padding: .375rem .75rem;
font-size: .8rem !important;
margin-top: -9px;
}
```


![](see-all.png){height="8em" fig-align="center"}




### Favicon
I used the free favicon generator: https://favicon.io/

### Logo branding

changing the navbar icon. I used [Excalidraw](https://excalidraw.com/) to create my website icon. 

![Navbar with title](navbar-with-title.png){height="9em" fig-align="center"}

![Navbar with logo](navbar-with-logo.png){height="12em" fig-align="center"}

```css
.navbar-logo {
  height: 4em !important;
  max-width: unset !important;
  max-height: unset !important;
}
```

The Quarto website itself does this through [a similar mechanism](https://github.com/quarto-dev/quarto-web/blob/main/styles.css#L36).  

### Github links

:::: {.columns}
::: {.column}
Many websites have sidebar content to "Report an issue" or "Edit this page". 

I followed the directions [here](https://quarto.org/docs/websites/website-navigation.html#github-links) and added the following code to the `_quarto.yml` file:

:::

::: {.column}
![](github-issue.png "'Report an issue' Github link"){fig-alt="Image of 'Report an issue' Github link" width="15em" fig-align="center"}
:::
::::

```yml
  repo-url: https://github.com/patdmob/patdmob.github.io
  repo-actions: [issue] 
```

The Github link only appears on pages that 

### Comments

One feature that many bloggers find helpful is the ability to allow comments on their posts. This not only allows readers to share their thoughts and engage with the content, but also provides valuable feedback for the blogger.

To add comments to your Quarto blog, you can use the [Giscus](https://giscus.app/) or [Utterances](https://utteranc.es/) commenting systems. These systems use GitHub to store comments, so you'll need to have a GitHub account and create a repository for your blog. I prefer Giscus because it stores the comments in the discussion section of the repository which I think is cleaner. Utterances also performs well, however stores the comments in repository issues. 

Instructions:

1. Go the the commenting system url: [Giscus](https://giscus.app/) or [Utterances](https://utteranc.es/)
2. Follow their setup directions
3. Type in the name of your `username/repo`

![](comments%20repo.png){width="35em" fig-align="center"}

|       Entering your `username/repo` here will populate the `repo-id` and other fields after selecting the your preferred options. 

4. Select a `Category`. Quarto recommends using the **Announcements** category in their [directions](https://quarto.org/docs/reference/projects/websites.html#comments). 

5. Copy the script output into your `_quarto.yml` file within the `website` property name and strip the output of `data-`. It should look something like this:

```yml
  comments:
    giscus: 
      repo: patdmob/patdmob.github.io
      repo-id: R_kgDOI-xxx
      category: Announcements
      category-id: DIC_kwDOI-1YBs4CUxxx
      mapping: title
      reactions-enabled: true
      input-position: top
      theme: light_protanopia
      loading: lazy
```

6. After completing these steps, you should have comments enabled on you website. It will even work locally when using the command `quarto preview`. To disable comments any page, just insert `comments: false` in the yml header of that page.



### Subscription feature

At the time of writing this, I haven't added a subscription feature. But many people have done it in a few different ways. Here are some resources if you want to include a subscription feature on your blog:

- Excellent post on [adding subscriptions to a Quarto site](https://forbo7.github.io/forblog/posts/7_blog_subscriptions.html)  
- Albert Rapp's Quarto guide also touches on this [here](https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html#newsletter)
- Quarto's documentation also has a [section](https://quarto.org/docs/websites/website-blog.html#subscriptions) to set up subscriptions.

### Includes

This is a really neat feature likely hailing from the C programming language. Basically, you can include references to other files throughout your document. The text/code in these other files will run as if it were in the main file. 

I've used this feature a lot when making Rmarkdown reports in the past. It's really useful to apply the DRY (Don't Repeat Yourself) of programming. So in a multi-post blog series, I could use the same starter code to load the data to for charts and tables within qmd files. 

Another use case is for different document formats. For instance, you want to make a presentation and a post of the same content. Rather than storing the code in two places, you could store the code in these  **include** files. When you need to update the code, the changes automatically update for both formats. While you might have more files, you'll have fewer places to update code, leading to fewer corrections and potential mistakes. 

To include a file, add the `{{{< include >}}}` shortcode at the location in your document where you want it included. Here's an example of including the `_content.qmd` file within the document:

``` {.markdown shortcodes="false"}
{{< include _content.qmd >}}
```

For more information about the **include** feature in Quarto checkout of the [include documentation](https://quarto.org/docs/authoring/includes.html). 

## Inspiration

Here are a few Quarto blogs which have inspired me. I hope they can inspire you too!

- [Salman Naqvi](https://forbo7.github.io/)
- [Mike Mahoney](https://www.mm218.dev/)
- [Bea Milz](https://beamilz.com/)
- [Tom Mock](https://themockup.blog/)
- [Albert Rapp](https://albert-rapp.de/) 
  - He also has an excellent guide for [creating a Quarto blog](https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html)